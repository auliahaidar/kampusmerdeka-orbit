# -*- coding: utf-8 -*-
"""latihan_logistik_regresi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XSpDIgXsyI5cFk-zmw3CKVxMfxI19SPc
"""

#yang paling penting

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""import data & load datashet"""

df = pd.read_csv('train.csv')

df.head()

df.shape

df.info()

"""bersihin data

cek dulu ada atau tidak data yang hilang
"""

df.isnull(). sum()

df.dropna(inplace = True)

df.isnull(). sum()

df.shape

"""df.head()"""

df.head()

"""EDA"""

plt.figure(figsize = (100,50))
sns.set(font_scale = 5)
plt.subplot(331)
sns.countplot(df['Gender'],hue=df['Loan_Status'])

plt.subplot(332)
sns.countplot(df['Married'],hue=df['Loan_Status'])

plt.subplot(333)
sns.countplot(df['Education'],hue=df['Loan_Status'])

plt.subplot(334)
sns.countplot(df['Self_Employed'],hue=df['Loan_Status'])

plt.subplot(335)
sns.countplot(df['Property_Area'],hue=df['Loan_Status'])

"""merubah atau mengganti isi yang ada di loan_status Y = 1 N = 0"""

df['Loan_Status'].replace('Y',1,inplace = True)
df['Loan_Status'].replace('N',0,inplace = True)

df['Loan_Status'].value_counts()

df.head()

df.Gender = df.Gender.map({'Male' : 1, 'Female' : 0})
df['Gender'].value_counts()

df.Married = df.Married.map({'Yes' : 1, 'No' : 0})
df['Married'].value_counts()

df.Education = df.Education.map({'Graduate' : 1, 'Not Graduate' : 0})
df['Education'].value_counts()

df.Self_Employed = df.Self_Employed.map({'Yes' : 1, 'No' : 0})
df['Self_Employed'].value_counts()

df.Property_Area = df.Property_Area.map({'Urban' : 2, 'Rural' : 0,'Semiurban':1})
df['Property_Area'].value_counts()

df.head()

df['LoanAmount'].value_counts()

df['Credit_History'].value_counts()

df['Dependents'].value_counts()

df = df.replace(to_replace = '3+', value = 4)

df['Dependents'].value_counts()

df.head()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Split data kedalam Train dan tes set"""

X = df.iloc[1:542,1:12].values
y = df.iloc[1:542,12].values

X_train,X_test,y_train,y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

"""LR"""

model = LogisticRegression()
model.fit(X_train,y_train)

lr_prediction = model.predict(X_test)
print('akurasi logistik regresi = ',metrics.accuracy_score(lr_prediction,y_test))

print("y_predicted",lr_prediction)
print("y_test",y_test)



"""TRain SVM( support Vector Machine)"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,y_train)

"""Model Evaluasi"""

#skor akurasi dalam training data
X_train_prediction = classifier.predict(X_train)
training_data_accuray = accuracy_score(X_train_prediction,y_train)

print('Akurasi training data :', training_data_accuray)

#skor akurasi dalam training data
X_train_prediction = classifier.predict(X_test)
test_data_accuray = accuracy_score(X_train_prediction,y_test)

print('Akurasi training data :', test_data_accuray)